#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 23 11:30:04 2017

@author: Kathleen Sellick 214504945
"""

#Question 1:

import numpy as np
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.animation as animation
from matplotlib import pyplot as plt



class nbody:
    def __init__(self,x=0,y=0,vx=0,vy=0,m=1.0):
        self.opts={"npart":5,"G":6.67*(10**(-11)),"soft":0.03}
        self.x=x
        self.y=y
        self.m=m
    def pot(self):
        pot=0
        for i in range(self.opts["npart"]):
            x=self.x[i]-self.x
            y=self.y[i]-self.y
            rsqr=x**2+y**2
            soft=self.opts["soft"]**2
            rsqr[rsqr<soft]=soft
            rsqr=rsqr+soft
            r=np.sqrt(rsqr)
            pot=pot+self.opts["G"]*np.sum(self.m/r)*self.m[i]
        return -0.5*pot
    
    
    
#Question 2:
    
    def initialize(self):
        self.x=np.random.randn(self.opts["npart"])
        self.y=np.random.randn(self.opts["npart"])
        self.m=np.ones(self.opts["npart"])*self.m/self.opts["npart"]
        self.vx=np.zeros(self.opts["npart"])
        self.vy=np.zeros(self.opts["npart"])
        self.fx=np.zeros(self.opts["npart"])
        self.fy=np.zeros(self.opts["npart"])
        
    def force(self):
        for i in range(self.opts["npart"]):
            x=self.x[i]-self.x
            y=self.y[i]=self.y
            rsqr=x**2+y**2
            soft=self.opts["soft"]**2
            rsqr[rsqr<soft]=soft
            rsqr=rsqr+soft
            r=np.sqrt(rsqr)
            r3=r*rsqr
            self.fx[i]=-self.opts["G"]*np.sum((self.m*x)/r3)*self.m[i]
            self.fy[i]=-self.opts["G"]*np.sum((self.m*y)/r3)*self.m[i]
            
    def evolve(self,dt):
        self.x=self.x+self.vx*dt
        self.y=self.y+self.vy*dt
        pot=self.pot()
        self.force()
        self.vx=self.vx+self.fx*dt
        self.vy=self.vy+self.fy*dt
        kin=0.5*np.sum(self.m*(self.vx**2+self.vy**2))
        return pot+kin


"""

I am receiving errors with both methods of executing the plots below,
the second method being the commented out method.

"""




system=nbody()
system.initialize()
#plt.plot(system.x,system.y,'.')
#plt.show()
dt=0.01
oversamp=5
fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, xlim=(-8, 8), ylim=(-8, 8))
line, = ax.plot([], [], '*', lw=2)

energy=np.array([])
print(type(energy))
def animate_points(crud):
    global system,line
    for ii in range(oversamp):
        value=np.array(system.updateParticles(dt))
    np.append(energy,value)
    print(value)
    line.set_data(system.x,system.y)

ani = animation.FuncAnimation(fig, animate_points, np.arange(30),interval=25, blit=False)
plt.show()

time=np.range(dt*energy.shape[0],dt)
plt.plot(time,energy)
plt.set_xlabel("Time(s)")
plt.set_ylabel("Energy")
plt.show()


    
    
#if __name__=='__main__':
#    plt.ion()
#    dt=0.01
#    oversamp=5
#    part=nbody()
#    plt.plot(part.x,part.y,'*')
#    plt.show()
#    
#
#
#    fig = plt.figure()
#    ax = fig.add_subplot(111, autoscale_on=False, xlim=(-5, 5), ylim=(-5, 5))
#    line, = ax.plot([], [], '*', lw=2)
#
#    #for i in range(0,10000):
#    def animate_points(crud):
#        global part,line,oversamp
#        for ii in range(oversamp):
#            energy=part.evolve(dt=0.01)
#        print (energy)
#        #plt.clf()
#        #plt.plot(part.x,part.y,'*')
#        line.set_data(part.x,part.y)
#        #plt.show()
#        
#    ani = animation.FuncAnimation(fig, animate_points, np.arange(30),
#                              interval=25, blit=False)
#    plt.show()
    
    
    
    
    
    
    
    